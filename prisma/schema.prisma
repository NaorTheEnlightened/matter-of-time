// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String?
  googleId  String?  @unique
  desires   Desire[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Desire {
  id           Int      @id @default(autoincrement())
  title        String
  image        String?
  timeDays     Int
  timeHours    Int
  timeMinutes  Int
  tools        Tool[]
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Tool {
  id              Int      @id @default(autoincrement())
  name            String
  probability     Float
  atomPlacements  AtomPlacement[]
  hypothesis      Hypothesis?
  desireId        Int
  desire          Desire   @relation(fields: [desireId], references: [id])
}

model AtomPlacement {
  id        Int     @id @default(autoincrement())
  beginning String
  end       String
  forces    Force[]
  toolId    Int
  tool      Tool    @relation(fields: [toolId], references: [id])
}

model Force {
  id               Int           @id @default(autoincrement())
  description      String
  atomPlacementId  Int
  atomPlacement    AtomPlacement @relation(fields: [atomPlacementId], references: [id])
}

model Hypothesis {
  id          Int     @id @default(autoincrement())
  description String
  isSuccessful Boolean @default(false)
  toolId      Int     @unique
  tool        Tool    @relation(fields: [toolId], references: [id])
}